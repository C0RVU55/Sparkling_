<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">


	<!-- 회원정보 가져오기 세션 -->
	<select id="selectUser" parameterType="com.javaex.vo.UserVo"
		resultType="com.javaex.vo.UserVo">
		<![CDATA[
			SELECT users.user_no,
			       users.nickname,
				   seller.sell_no,
				   seller.book_type,
				   seller.prod_type
			FROM users left outer JOIN seller
			on seller.user_no = users.user_no
			where users.user_id = #{user_id}
			and users.password = #{password}
		]]>
	</select>
	
		<!-- 회원정보 가져오기 sns로그인 -->
	<select id="selectSocialUser" parameterType="String" resultType="com.javaex.vo.UserVo">
		<![CDATA[
			SELECT users.user_no,
			       users.nickname,
				   seller.sell_no,
				   seller.book_type,
				   seller.prod_type
			FROM users left outer JOIN seller
			on seller.user_no = users.user_no
			where users.user_id = #{user_id}
		]]>
	</select>
	
	

	<select id="selectOneUserAddress" parameterType="int" resultType="UserVo">
		<![CDATA[
			select roadaddress
			from users
			where user_no = #{userNo}
		]]>

	</select>


	<select id="joinUserIdChechSelect" parameterType="String" resultType="com.javaex.vo.UserVo">
		<![CDATA[
			SELECT user_id
			FROM users
			where user_id = #{user_id}
		]]>
	</select>

	<!-- 카카오 회원가입 -->
	<insert id="kakaoInsert" parameterType="com.javaex.vo.UserVo">
		<selectKey keyProperty="user_no" resultType="int" order="BEFORE">
			select seq_user_no.nextval
			from
			dual
		</selectKey>
			<![CDATA[
		insert into users (user_no, 
	                        user_id,
	                        password,
	                        nickname,
	                        user_date,
	                        social
	                        )
	                VALUES(#{user_no}, 
	                       #{user_id},
	                       #{password},
	                       #{nickname},
	                        sysdate,
	                        'kakao'
	                      )
			]]>
	</insert>
	<!-- 네이버 회원가입 -->
	<insert id="naverInsert" parameterType="com.javaex.vo.UserVo">
		<selectKey keyProperty="user_no" resultType="int" order="BEFORE">
			select seq_user_no.nextval
			from dual
		</selectKey>
			<![CDATA[
		insert into users (user_no, 
	                        user_id,
							user_name,
							password,
							nickname,
							user_date,
							gender,
							social
							)
	                VALUES(#{user_no},
	                       #{user_id},
	                       #{user_name},
	                       #{password},
	                       #{nickname},
	                        sysdate,
	                        #{gender},
	                        'naver'
	                      )
			]]>
	</insert>



	<!-- 회원정보입력 -->
	<update id="joininfoUPdate" parameterType="com.javaex.vo.UserVo">
		<![CDATA[
			UPDATE users 
			SET user_name= #{user_name},
			    nickname=#{nickname},
			    roadAddress=#{roadaddress},
			    addressdetail=#{addressdetail},
			    user_photo=#{user_photo},
			    user_phone=#{user_phone},
			    gender=#{gender}
			where user_no = #{user_no}    
		]]>
	</update>

	
	<delete id="joinDelete" parameterType="int">
		<![CDATA[
			DELETE FROM users 
			WHERE user_no = #{user_no}
		]]>
	</delete>





	<insert id="sellerBookInsert" parameterType="com.javaex.vo.SellerVo">
		<selectKey keyProperty="sell_no" resultType="int" order="BEFORE">
			select seq_sell_no.nextval
			from
			dual
		</selectKey>
		<![CDATA[
			insert into seller (sell_no, 
								  user_no, 
								  book_type,
								  prod_type,
								  book_sell_name,
								  book_com_name,
								  book_business_no, 
								  book_sell_address, 
								  book_sell_bank, 
								  book_sell_account
								  )
							VALUES(#{sell_no}, 
								  #{user_no}, 
								  #{book_type},
								  0,
								  #{book_sell_name},
								  #{book_com_name}, 
								  #{book_business_no}, 
								  #{book_sell_address}, 
								  #{book_sell_bank}, 
								  #{book_sell_account}
								  )
		]]>
	</insert>

	<insert id="sellerProdInsert" parameterType="com.javaex.vo.SellerVo">
		<selectKey keyProperty="sell_no" resultType="int" order="BEFORE">
			select seq_sell_no.nextval
			from
			dual
		</selectKey>
		<![CDATA[
			insert into seller (sell_no, 
								  user_no, 
								  book_type,
								  prod_type, 
								  prod_sell_name,
								  prod_com_name, 
								  prod_business_no, 
								  prod_sell_address, 
								  prod_sell_bank, 
								  prod_sell_account
								  )
			  	    VALUES(#{sell_no}, 
						  #{user_no}, 
						  0,
						  #{prod_type}, 
						  #{prod_sell_name}, 
						  #{prod_com_name},
						  #{prod_business_no}, 
						  #{prod_sell_address}, 
						  #{prod_sell_bank}, 
						  #{prod_sell_account}
						  )
		]]>
	</insert>

	<select id="sellerSelectOne" parameterType="int" resultType="com.javaex.vo.SellerVo">
		<![CDATA[
			select sell_no,
			       user_no,
			       book_type,
			       prod_type,
			       book_sell_name,
			       book_com_name,
			       book_business_no,
			       book_sell_address,
			       book_sell_bank,
			       book_sell_account,
			       prod_sell_name,
			       prod_business_no,
			       prod_sell_address,
			       prod_sell_bank,
			       prod_sell_account,
			       prod_com_name
			from seller
			where sell_no = #{sell_no}
		]]>
	</select>

	<update id="prodSellerUpdate" parameterType="com.javaex.vo.SellerVo">
		<![CDATA[
			update seller
			set prod_type = #{prod_type}, 
				prod_sell_name = #{prod_sell_name}, 
				prod_com_name = #{prod_com_name},
				prod_business_no = #{prod_business_no}, 
				prod_sell_address = #{prod_sell_address}, 
				prod_sell_bank = #{prod_sell_bank}, 
				prod_sell_account = #{prod_sell_account}
			where sell_no = #{sell_no}	
		]]>
	</update>

	<update id="bookSellerUpdate" parameterType="com.javaex.vo.SellerVo">
		<![CDATA[
			update seller
			set book_type = #{book_type},
				book_sell_name = #{book_sell_name}, 
				book_com_name = #{book_com_name},
				book_business_no = #{book_business_no}, 
				book_sell_address = #{book_sell_address}, 
				book_sell_bank = #{book_sell_bank}, 
				book_sell_account = #{book_sell_account}
			where sell_no = #{sell_no}	
			]]>
	</update>

	<update id="sellerUpdate" parameterType="com.javaex.vo.SellerVo">
		<![CDATA[
			update seller
			set book_type = #{book_type},
				prod_type = #{prod_type}, 
				book_sell_name = #{book_sell_name}, 
				book_com_name = #{book_com_name},
				book_business_no = #{book_business_no}, 
				book_sell_address = #{book_sell_address}, 
				book_sell_bank = #{book_sell_bank}, 
				book_sell_account = #{book_sell_account},
				prod_sell_name = #{prod_sell_name}, 
				prod_com_name = #{prod_com_name},
				prod_business_no = #{prod_business_no}, 
				prod_sell_address = #{prod_sell_address}, 
				prod_sell_bank = #{prod_sell_bank}, 
				prod_sell_account = #{prod_sell_account}
			where user_no = #{user_no}	
		]]>
	</update>
	

	
	<!-- 수익관리 - 배송 -->
	<select id="prodProfitExceptSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  b.buy_date,
			        bp.buyprod_price,
			        p.sell_no,
			        SUM(buyprod_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM buyproduct bp, buy b, product p, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			       to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend FROM DUAL) d
			where bp.buy_no=b.buy_no
			and bp.prod_no=p.prod_no
			and sell_no = #{sell_no}
			and b.buy_date BETWEEN d.monthstart and d.monthend
		]]>	
	</select>

	<select id="prodProfitPossibleSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  b.buy_date,
			        bp.buyprod_price,
			        p.sell_no,
                    startday,
                    yesterday,
			        SUM(buyprod_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM buyproduct bp, buy b, product p, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			       to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend,
                   to_char(TRUNC(SYSDATE, 'MM')) as startday,
                   to_char(sysdate-1,'yyyy-mm-dd') as yesterday,
                   to_char(sysdate,'yyyy-mm-dd') as today
                   FROM DUAL) d
			where bp.buy_no=b.buy_no
			and bp.prod_no=p.prod_no
			and sell_no = #{sell_no}
			and b.buy_date >= startday and b.buy_date < today
		]]>	
	</select>
	
		<select id="prodProfitCompleteSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  b.buy_date,
			        bp.buyprod_price,
			        p.sell_no,
			        SUM(buyprod_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM buyproduct bp, buy b, product p, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			       to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend FROM DUAL) d
			where bp.buy_no=b.buy_no
			and bp.prod_no=p.prod_no
			and sell_no = #{sell_no}
			and b.buy_date BETWEEN #{peri_start} and d.monthend
		]]>	
	</select>
	
		<select id="prodProfitTotalSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  b.buy_date,
			        bp.buyprod_price,
			        p.sell_no,
			        SUM(buyprod_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM buyproduct bp, buy b, product p, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			       to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend FROM DUAL) d
			where bp.buy_no=b.buy_no
			and bp.prod_no=p.prod_no
			and sell_no = #{sell_no}
			and b.buy_date >= #{peri_start} and b.buy_date <= #{peri_end}
		]]>	
	</select>
	
	<!-- 수익관리 - 대관 -->
	<select id="bookProfitExceptSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  b.buy_date,
			        bb.b_buy_price,
			        g.sell_no,
			        SUM(b_buy_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM bbuy bb, booking b, gym g, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			                                        to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend FROM DUAL) d
			where bb.booking_no=b.booking_no
			and b.gym_no = g.gym_no
			and sell_no = #{sell_no}
			and bb.b_buy_date BETWEEN d.monthstart and d.monthend
		]]>	
	</select>

	<select id="bookProfitPossibleSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  bb.b_buy_date,
			        bb.b_buy_price,
			        g.sell_no,
			        SUM(b_buy_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM buyproduct bp, buy b, product p, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			       to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend,
                   to_char(TRUNC(SYSDATE, 'MM')) as startday,
                   to_char(sysdate-1,'yyyy-mm-dd') as yesterday,
                   to_char(sysdate,'yyyy-mm-dd') as today
                   FROM DUAL) d
			where bb.booking_no=b.booking_no
			and b.gym_no = g.gym_no
			and sell_no = #{sell_no}
			and bb.b_buy_date >= startday and bb.b_buy_date < today
		]]>	
	</select>
	
	<select id="bookProfitCompleteSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  bb.b_buy_date,
			        bb.b_buy_price,
			        g.sell_no,
			        SUM(b_buy_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM bbuy bb, booking b, gym g, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			                                        to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend FROM DUAL) d
			where bb.booking_no=b.booking_no
			and b.gym_no = g.gym_no
			and sell_no = #{sell_no}
			and bb.b_buy_date BETWEEN #{peri_start} and d.monthend
		]]>	
	</select>

	<select id="bookProfitTotalSelect" parameterType="com.javaex.vo.ProfitVo" resultType="com.javaex.vo.ProfitVo">
		<![CDATA[
			SELECT  bb.b_buy_date,
			        bb.b_buy_price,
			        g.sell_no,
			        SUM(b_buy_price) OVER(
			        ORDER BY sell_no
			        ROWS BETWEEN UNBOUNDED PRECEDING
			        AND CURRENT ROW
			    ) AS total
			FROM bbuy bb, booking b, gym g, (select to_char(add_months(sysdate,-1),'yyyy-mm') || '-01'  as monthstart, 
			                                              to_char(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD') AS monthend FROM DUAL) d
			where bb.booking_no=b.booking_no
			and b.gym_no = g.gym_no
			and sell_no = #{sell_no}
			and bb.b_buy_date BETWEEN #{peri_start} and #{peri_end}
		]]>	
	</select>

</mapper>

